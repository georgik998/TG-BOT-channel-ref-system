from aiogram import Bot, Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import Message, CallbackQuery

from datetime import datetime
from math import ceil
import project.src.bot.keyboards as kb
from project.src.bot.db.database import DB_ROOT, DataBase, create_connection, close_connection
from project.src.bot.fsm import *

video_router = Router()
database = DataBase()


@video_router.message(F.text == 'ü§© –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –≤–∏–¥–µ–æ', StateFilter(default_state))
async def video(message: Message, bot: Bot):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    create_connection(DB_ROOT, database)
    text = database.get_text(text='video')
    close_connection(database)


    sticker_id = await message.answer_sticker(
        sticker='CAACAgEAAxkBAAEMB41mMTrptszvuCJ7rWsbYLAHYdM7NwACtAIAAv1TMUdi6Si4KNBSqzQE')
    sticker_id = sticker_id.message_id
    keyboard = kb.create_keyboard_inline([
        [['üí∞ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É ', f'video_withdrawal:{sticker_id}']],
        [['üóìÔ∏è –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç', f'video_history_withdrawal:{sticker_id}']],
        [['üí¢ –ó–∞–∫—Ä—ã—Ç—å', f'close:{sticker_id}']]
    ])
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML', disable_web_page_preview=True)


@video_router.callback_query(F.data[:len('video_withdrawal')] == 'video_withdrawal', StateFilter(default_state))
async def video_withdrawal(callback: CallbackQuery):
    sticker_id = callback.data.split(':')[1]
    keyboard = kb.create_keyboard_inline([
        [['TikTok', f'video_platform:TikTok:{sticker_id}']],
        [['YouTube Shorts', f'video_platform:YouTube Shorts:{sticker_id}']],
        [['Insta Reels', f'video_platform:Insta Reels:{sticker_id}']],
        [[' ‚¨ÖÔ∏è –ù–∞–∑–∞–¥', f'video_home:{sticker_id}']]
    ])
    await callback.message.edit_text(
        text='ü§© –í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –∏–∑ –≤–∏–¥–µ–æ-–ø–ª–∞—Ç—Ñ–æ—Ä–º –≤—ã –Ω–∞–±—Ä–∞–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã.',
        reply_markup=keyboard
    )


def create_history_text(orders, info, bank, page) -> str:
    TEXT = ('üóì <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç</b>\n'
            '\n'
            f'üí∞ <b>–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ:</b> {info}‚ÇΩ\n'
            f'üè¶ <b>–û–±—â–∏–π –±–∞–Ω–∫:</b> {bank}‚ÇΩ\n')

    text = """
<b>number. date
url
–°—Ç–∞—Ç—É—Å: status
–í—ã–ø–ª–∞—á–µ–Ω–æ: price‚ÇΩ</b>
"""
    number = (page - 1) * 7 + 1
    for item in orders:
        TEXT += text.replace('number', str(number)).replace('date', item[2]).replace('url', item[7]).replace('status',
                                                                                                             item[
                                                                                                                 1]).replace(
            'price', str(item[3]))
        number += 1
    return TEXT


@video_router.callback_query(F.data[:len('video_history_withdrawal')] == 'video_history_withdrawal',
                             StateFilter(default_state))
async def video_history_withdrawal(callback: CallbackQuery):
    sticker_id = callback.data.split(':')[1]
    create_connection(DB_ROOT, database)
    orders = database.get_user_orders(user_id=callback.from_user.id, type='video')
    info = database.get_user_info(user_id=callback.from_user.id, type='video')[1]
    bank = database.get_bank_balance()[0]
    close_connection(database)
    orders = orders[::-1]
    text = create_history_text(orders[:7], info, bank=bank, page=1)

    pages = ceil(len(orders) / 7)
    if pages == 0 or pages == 1:
        keyboard = kb.create_keyboard_inline([
            [[f'1/1', '-']],
            [['üí¢ –ó–∞–∫—Ä—ã—Ç—å ', f'close:{sticker_id}']],
            [[' ‚¨ÖÔ∏è –ù–∞–∑–∞–¥', f'video_home:{sticker_id}']]
        ])
    else:
        keyboard = kb.create_keyboard_inline([
            [[f'1/{ceil(len(orders) / 7)}', '-'], ['‚û°Ô∏è ', f'video_pagination:1:1:{sticker_id}']],
            [['üí¢ –ó–∞–∫—Ä—ã—Ç—å ', f'close:{sticker_id}']],
            [[' ‚¨ÖÔ∏è –ù–∞–∑–∞–¥', f'video_home:{sticker_id}']]
        ])
    await callback.message.edit_text(text=text,
                                     reply_markup=keyboard,
                                     parse_mode='HTML',
                                     disable_web_page_preview=True
                                     )


@video_router.callback_query(F.data[:len('video_pagination')] == 'video_pagination', StateFilter(default_state))
async def video_history_swipe(callback: CallbackQuery):
    data = callback.data.split(':')
    sticker_id = data[3]
    page = int(data[2]) + int(data[1])
    if page >= 1:
        create_connection(DB_ROOT, database)
        orders = database.get_user_orders(user_id=callback.from_user.id, type='video')
        info = database.get_user_info(user_id=callback.from_user.id, type='video')[1]
        bank = database.get_bank_balance()[0]
        close_connection(database)
        orders = orders[::-1]

        if orders:
            text = create_history_text(orders[(page - 1) * 7:page * 7], info, bank, page)
            if page == ceil(len(orders) / 7):
                keyboard = kb.create_keyboard_inline([
                    [[' ‚¨ÖÔ∏è', f'video_pagination:-1:{page}:{sticker_id}'], [f'{page}/{ceil(len(orders) / 7)}', '-']],
                    [['üí¢ –ó–∞–∫—Ä—ã—Ç—å ', f'close:{sticker_id}']],
                    [[' ‚¨ÖÔ∏è –ù–∞–∑–∞–¥', f'video_home:{sticker_id}']]
                ])
            elif page == 1:
                keyboard = kb.create_keyboard_inline([
                    [[f'{page}/{ceil(len(orders) / 7)}', '-'], ['‚û°Ô∏è ', f'video_pagination:1:{page}:{sticker_id}']],
                    [['üí¢ –ó–∞–∫—Ä—ã—Ç—å ', f'close:{sticker_id}']],
                    [[' ‚¨ÖÔ∏è –ù–∞–∑–∞–¥', f'video_home:{sticker_id}']]
                ])
            else:
                keyboard = kb.create_keyboard_inline([
                    [[' ‚¨ÖÔ∏è', f'video_pagination:-1:{page}:{sticker_id}'], [f'{page}/{ceil(len(orders) / 7)}', '-'],
                     ['‚û°Ô∏è ', f'video_pagination:1:{page}:{sticker_id}']],
                    [['üí¢ –ó–∞–∫—Ä—ã—Ç—å ', f'close:{sticker_id}']],
                    [[' ‚¨ÖÔ∏è –ù–∞–∑–∞–¥', f'video_home:{sticker_id}']]
                ])
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode='HTML', disable_web_page_preview=True)


# Platform
@video_router.callback_query(F.data[:len('video_home')] == 'video_home', StateFilter(default_state))
async def platform_back(callback: CallbackQuery):
    sticker_id = callback.data.split(':')[1]
    create_connection(DB_ROOT, database)
    text = database.get_text(text='video')
    close_connection(database)


    keyboard = kb.create_keyboard_inline([
        [['üí∞ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É ', f'video_withdrawal:{sticker_id}']],
        [['üóìÔ∏è –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç', f'video_history_withdrawal:{sticker_id}']],
        [['üí¢ –ó–∞–∫—Ä—ã—Ç—å', f'close:{sticker_id}']]
    ])
    await callback.message.edit_text(
        text=text,
        reply_markup=keyboard, parse_mode='HTML', disable_web_page_preview=True)


@video_router.callback_query(F.data[:len('video_platform')] == 'video_platform', StateFilter(default_state))
async def platform_select(callback: CallbackQuery, state: FSMContext):
    await state.set_state(VideoState.video_url_question)
    data = callback.data.split(':')
    keyboard = kb.create_keyboard_inline([
        [[' ‚¨ÖÔ∏è –ù–∞–∑–∞–¥', f'video_withdrawal_back_url:{data[2]}']]
    ])
    message = await callback.message.edit_text(text='–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ:', reply_markup=keyboard)

    await state.update_data({'message_id': message.message_id,
                             'platform': data[1],
                             'sticker_id': data[2]})


@video_router.callback_query(F.data[:len('video_withdrawal_back_url')] == 'video_withdrawal_back_url',
                             StateFilter(VideoState.video_url_question))
async def video_withdrawal_back_url(callback: CallbackQuery, state: FSMContext):
    await state.set_state(default_state)
    cash = await state.get_data()
    sticker_id = cash['sticker_id']
    keyboard = kb.create_keyboard_inline([
        [['TikTok', f'video_platform:TikTok:{sticker_id}']],
        [['YouTube Shorts', f'video_platform:YouTube Shorts:{sticker_id}']],
        [['Insta Reels', f'video_platform:Insta Reels:{sticker_id}']],
        [[' ‚¨ÖÔ∏è –ù–∞–∑–∞–¥', f'video_home:{sticker_id}']]
    ])
    await callback.message.edit_text(
        text='ü§© –í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –∏–∑ –≤–∏–¥–µ–æ-–ø–ª–∞—Ç—Ñ–æ—Ä–º –≤—ã –Ω–∞–±—Ä–∞–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã.',
        reply_markup=keyboard
    )


@video_router.message(StateFilter(VideoState.video_url_question))
async def platform_select(message: Message, bot: Bot, state: FSMContext):


    cash = await state.get_data()
    cash['url'] = message.text
    create_connection(DB_ROOT, database)
    res = database.query_execute(f"""SELECT * FROM videos WHERE url = "{cash['url']}" """)
    close_connection(database)

    message_id = cash['message_id']
    sticker_id = cash['sticker_id']

    if not res:
        keyboard = kb.create_keyboard_inline([
            [[' ‚¨ÖÔ∏è –ù–∞–∑–∞–¥', f'video_views_back:{sticker_id}']]
        ])
        await state.set_state(VideoState.views_question)
        await bot.delete_message(chat_id=message.chat.id, message_id=message_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

        message = await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —É –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ:', reply_markup=keyboard)
        cash['message_id'] = message.message_id
        await state.update_data(cash)
    else:
        keyboard = kb.create_keyboard_inline([
            [[' ‚¨ÖÔ∏è –ù–∞–∑–∞–¥', f'video_withdrawal_back_url:{sticker_id}']]
        ])

        await message.answer("""–≠—Ç–æ –≤–∏–¥–µ–æ —É–∂–µ —Ä–∞–Ω–µ–µ –ø–æ–¥–∞–≤–∞–ª–æ—Å—å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É.""", reply_markup=keyboard)



@video_router.callback_query(StateFilter(VideoState.views_question),
                             F.data[:len('video_views_back')] == 'video_views_back')
async def video_views_back(callback: CallbackQuery, state: FSMContext):
    await state.set_state(VideoState.video_url_question)
    sticker_id = callback.data.split(':')[1]
    keyboard = kb.create_keyboard_inline([
        [[' ‚¨ÖÔ∏è –ù–∞–∑–∞–¥', f'video_withdrawal_back_url:{sticker_id}']]
    ])
    await callback.message.edit_text(text='–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ:', reply_markup=keyboard)


@video_router.message(StateFilter(VideoState.views_question))
async def views_question(message: Message, bot: Bot, state: FSMContext):
    views = message.text
    cash = await state.get_data()
    if all(char.isdigit() for char in views):
        if int(views) >= 8000:
            platform = cash['platform']
            url = cash['url']
            message_id = cash['message_id']
            sticker_id = cash['sticker_id']
            await state.set_state(VideoState.user_name_question)

            text = """
<b>–í–∏–¥–µ–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤—ã –≤—ã–±—Ä–∞–ª–∏:</b> platform

<b>–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞–±—Ä–∞–ª –≤–∞—à –≤–∏–¥–µ–æ —Ä–æ–ª–∏–∫:</b> views

<b>–í–∏–¥–µ–æ:</b>
url

<b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í—ã –∑–∞–≤–µ—Ä—à–∞–µ—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É. –ï—Å–ª–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤—ã—à–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–∫–∞–∑–∞–ª–∏ 5000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –≤–º–µ—Å—Ç–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö 100 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤), –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ 18+  –¥–ª—è –Ω–∞—Ä—É—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞,
–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ùå –ó–∞–∫—Ä—ã—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –Ω–∏–∫–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ.
–ï—Å–ª–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∏ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –≤–∏–¥–µ–æ-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–µ –±—ã–ª–æ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –∑–∞–≤—ã—à–µ–Ω–æ.
–¢–∞–∫ –∂–µ –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–æ–ª–∏–∫–æ–≤, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —ç—Ç–æ–π  –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É , –¥—Ä—É–≥–æ–π –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫

<b>–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –Ω–∏–∫ Telegram –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:</b>
    """
            text = text.replace('platform', platform).replace('views', views).replace('url', url)

            await bot.delete_message(chat_id=message.chat.id, message_id=message_id)
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            keyboard = kb.create_keyboard_inline([
                [['‚ùå –ó–∞–∫—Ä—ã—Ç—å', f'close:{sticker_id}']],
                [['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ', f'video_home:{sticker_id}']]
            ])
            message = await message.answer(
                text=text,
                reply_markup=keyboard,
                disable_web_page_preview=True,
                parse_mode='HTML'
            )
            cash['views'] = views
            cash['message_id'] = message.message_id
            await state.update_data(cash)
        else:
            await state.clear()
            keyboard = kb.create_keyboard_inline([
                [['‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', f'views_low_back']]
            ])
            await message.answer('<b>–ù–∞ –≤–∞—à–µ–º –≤–∏–¥–µ–æ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 8000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</b>', reply_markup=keyboard,
                                 parse_mode='HTML')
    else:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    await state.update_data(cash)


@video_router.callback_query(StateFilter(VideoState.user_name_question), F.data[:len('video_home')] == 'video_home')
async def user_name_question_back(callback: CallbackQuery, state: FSMContext):
    await state.set_state(VideoState.views_question)
    keyboard = kb.create_keyboard_inline([
        [[' ‚¨ÖÔ∏è –ù–∞–∑–∞–¥', f'video_views_back:{callback.data.split(":")[1]}']]
    ])
    await callback.message.edit_text(text='–ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —É –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ:',
                                     reply_markup=keyboard)


# User_name
@video_router.message(StateFilter(VideoState.user_name_question))
async def user_name_question(message: Message, bot: Bot, state: FSMContext):
    await state.set_state(default_state)
    cash = await state.get_data()
    message_id = cash['message_id']
    sticker_id = cash['sticker_id']
    create_connection(DB_ROOT, database)
    database.add_order_video(date=datetime.now().strftime('%d.%m.%y').rstrip('0'),
                             user_id=message.from_user.id,
                             user_name=message.text,
                             platform=cash['platform'],
                             url=cash['url'],
                             views=cash['views'])
    database.query_execute(f"""INSERT INTO videos (url) VALUES("{cash['url']}")""")
    close_connection(database)

    await bot.delete_message(chat_id=message.chat.id, message_id=message_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    keyboard = kb.create_keyboard_inline([
        [['‚ùå –ó–∞–∫—Ä—ã—Ç—å', f'close:{sticker_id}']],
        [['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ', f'video_home:{sticker_id}']]
    ])
    await message.answer(
        text='<b>–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É, –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞—è–≤–∫–∏, –≤ üóìÔ∏è –ò—Å—Ç–æ—Ä–∏—è—Ö –≤—ã–ø–ª–∞—Ç.</b>',
        reply_markup=keyboard,
        parse_mode='HTML'
    )

    await state.clear()
    await state.set_state(default_state)


@video_router.callback_query(F.data[:len('back')] == 'back', StateFilter(VideoState.user_name_question))
async def back_user_name_wait(callback: CallbackQuery):
    sticker_id = callback.data.split(':')[1]
    keyboard = kb.create_keyboard_inline([
        [['TikTok', f'video_platform:TikTok:{sticker_id}']],
        [['YouTube Shorts', f'video_platform:YouTube Shorts:{sticker_id}']],
        [['Insta Reels', f'video_platform:Insta Reels:{sticker_id}']],
        [[' ‚¨ÖÔ∏è –ù–∞–∑–∞–¥', f'video_home:{sticker_id}']]
    ])
    await callback.message.edit_text(
        text='ü§© –í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –∏–∑ –≤–∏–¥–µ–æ-–ø–ª–∞—Ç—Ñ–æ—Ä–º –≤—ã –Ω–∞–±—Ä–∞–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã.',
        reply_markup=keyboard
    )


@video_router.callback_query(F.data == 'views_low_back', StateFilter(default_state))
async def views_low_back(callback: CallbackQuery):
    await callback.message.delete()
    create_connection(DB_ROOT, database)
    text = database.get_text(text='video')
    close_connection(database)


    sticker_id = await callback.message.answer_sticker(
        sticker='CAACAgEAAxkBAAEMB41mMTrptszvuCJ7rWsbYLAHYdM7NwACtAIAAv1TMUdi6Si4KNBSqzQE')
    sticker_id = sticker_id.message_id
    keyboard = kb.create_keyboard_inline([
        [['üí∞ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É ', f'video_withdrawal:{sticker_id}']],
        [['üóìÔ∏è –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç', f'video_history_withdrawal:{sticker_id}']],
        [['üí¢ –ó–∞–∫—Ä—ã—Ç—å', f'close:{sticker_id}']]
    ])
    await callback.message.answer(text, reply_markup=keyboard, parse_mode='HTML', disable_web_page_preview=True)
